{
	"name": "sdlh_mysql_generate_metadata",
	"properties": {
		"activities": [
			{
				"name": "for_each_table_metadata",
				"description": "This for loop iterates through the each TABLE_NAME from ETL.SourceTable. Using the table name, it is able to grab the relevant metadata, and construct the query to retrieve the source data.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "truncate_etl_meta_and_columns",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('etl_metadata_mysql_objects').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "initialize_etl_sql_incremental_load",
							"description": "This table checks if the current table exists in the SourceIncrementalLoad table. If it exists, nothing will happen. If it doesn't exist, the stored procedure run will insert a row for it, with the default SYS_CHANGE_VERSION= '0'.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "update_etl_tables",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_InitializeIncrementalLoad]",
								"storedProcedureParameters": {
									"DATABASE_NAME": {
										"value": {
											"value": "@item().DATABASE_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"INCREMENTAL_LOAD_TYPE": {
										"value": {
											"value": "@item().LOAD_TYPE",
											"type": "Expression"
										},
										"type": "String"
									},
									"SCHEMA_NAME": {
										"value": {
											"value": "@item().TABLE_SCHEMA",
											"type": "Expression"
										},
										"type": "String"
									},
									"SOURCE_SYSTEM": {
										"value": {
											"value": "@item().SOURCE_SYSTEM",
											"type": "Expression"
										},
										"type": "String"
									},
									"SYS_CHANGE_VERSION_VALUE": {
										"value": {
											"value": "@if(equals(item().LOAD_TYPE, 'CHANGE_TRACKING'), '0', 'NULL')",
											"type": "Expression"
										},
										"type": "String"
									},
									"TABLE_NAME": {
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"WATERMARK_FIELD": {
										"value": {
											"value": "@if(equals(item().LOAD_TYPE, 'HIGH_WATERMARK'), item().WATERMARK_FIELD, 'NULL')",
											"type": "Expression"
										},
										"type": "String"
									},
									"WATERMARK_VALUE": {
										"value": {
											"value": "@if(equals(item().LOAD_TYPE, 'HIGH_WATERMARK'), '1900-01-01 00:00:00', 'NULL' )",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "azure_sql_sdlh_azir",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "update_etl_tables",
							"description": "Queries the source SQL Server metadata regarding the required tables, and writes them in the ETL.SourceTable",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "update_etl_columns",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "MySqlSource",
									"query": {
										"value": "WITH CTE_ALIAS AS (\nselect *,\n    case\n    WHEN COLUMN_NAME  LIKE (' %') THEN REPLACE(LOWER(COLUMN_NAME), ' ', '') \n    WHEN COLUMN_NAME LIKE ('% ') THEN REPLACE(LOWER(COLUMN_NAME), ' ', '')\n    ELSE REPLACE(LOWER(COLUMN_NAME), ' ', '_') \n    END as 'COLUMN_ALIAS'\n\n\nfrom INFORMATION_SCHEMA.COLUMNS),\ncte_col_with_alias as (\nSELECT *, \n    CONCAT('S.',COLUMN_NAME, ' AS ' , COLUMN_ALIAS) AS COLUMN_WITH_ALIAS\nFROM CTE_ALIAS\n),\ncte_cols_meta as ( \nSELECT\nTABLE_NAME,\nGROUP_CONCAT(DISTINCT COLUMN_WITH_ALIAS) COLUMNS_META,\nGROUP_CONCAT(DISTINCT COLUMN_NAME) COLUMNS_LIST\nFROM\ncte_col_with_alias AS p\nGROUP BY\np.TABLE_NAME)\n\n\n\n\nselect \n    '@{item().SOURCE_SYSTEM}' AS SOURCE_SYSTEM,\n    '@{item().DATABASE_NAME}' as DATABASE_NAME,\n    '@{item().TABLE_SCHEMA}' as 'SCHEMA_NAME',\n    '@{item().TABLE_NAME}' as 'TABLE_NAME',\n    '@{item().PRIMARY_KEYS}' as 'PRIMARY_KEYS',\n    '@{item().SOURCE_SYS_CONNECTION_STRING}' as SOURCE_SYSTEM_CONNECTION_STRING,                           \n                \n    cte_cols_meta.COLUMNS_META,\n    cte_cols_meta.COLUMNS_LIST,\n    '@{item().LOAD_TYPE}' as LOAD_TYPE,\n    '@{item().OBJECT_TYPE}' AS OBJECT_TYPE,\n    '@{item().BATCH_FREQUENCY}' as BATCH_FREQUENCY,\n    '@{item().SERVERLESS_SQL_POOL_DATABASE}' as SERVERLESS_SQL_POOL_DATABASE,\n    '@{item().SERVERLESS_SQL_POOL_SCHEMA}' as SERVERLESS_SQL_POOL_SCHEMA\n\n\nfrom cte_cols_meta,  INFORMATION_SCHEMA.TABLES\nwhere INFORMATION_SCHEMA.TABLES.TABLE_NAME = cte_cols_meta.TABLE_NAME and\n INFORMATION_SCHEMA.TABLES.TABLE_NAME = '@{item().TABLE_NAME}'\n",
										"type": "Expression"
									}
								},
								"sink": {
									"type": "SqlServerSink",
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sdlh_mysql_db_table",
									"type": "DatasetReference",
									"parameters": {
										"SOURCE_SYSTEM": "NA",
										"DATABASE_NAME": "NA",
										"TABLE_NAME": "NA",
										"SOURCE_SYSTEM_CONNECTION_STRING": {
											"value": "@item().SOURCE_SYS_CONNECTION_STRING",
											"type": "Expression"
										},
										"COLUMNS_META": "NA"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sdlh_azsql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "SourceTable"
									}
								}
							]
						},
						{
							"name": "update_etl_columns",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "MySqlSource",
									"query": {
										"value": "SELECT\n    TABLE_SCHEMA as SCHEMA_NAME\n    ,TABLE_NAME\n    , COLUMN_NAME\n    , IS_NULLABLE\n    , DATA_TYPE\n    , CHARACTER_MAXIMUM_LENGTH\n\n\nFROM INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = '@{item().TABLE_NAME}'",
										"type": "Expression"
									}
								},
								"sink": {
									"type": "SqlServerSink",
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sdlh_mysql_db_table",
									"type": "DatasetReference",
									"parameters": {
										"SOURCE_SYSTEM": "NA",
										"DATABASE_NAME": "NA",
										"TABLE_NAME": "NA",
										"SOURCE_SYSTEM_CONNECTION_STRING": {
											"value": "@item().SOURCE_SYS_CONNECTION_STRING",
											"type": "Expression"
										},
										"COLUMNS_META": "NA"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sdlh_azsql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "SourceColumn"
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "lookup_etl_metadata_form",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"dataset": {
						"referenceName": "sdlh_gen2_csv_comma",
						"type": "DatasetReference",
						"parameters": {
							"FILE_SYSTEM": "metadata",
							"DIRECTORY": "sdlh_metadata_form",
							"FILE_NAME": "metadata_form.csv"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "initialize_etl_json_meta",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "initialize_versions",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ETL].[usp_InitializeOrUpdateJsonMeta]",
					"storedProcedureParameters": {
						"PARAM_JSON_TRIGGER": {
							"value": {
								"value": "@string(pipeline().parameters.PARAM_JSON_TRIGGER)",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_OBJECT_TYPE": {
							"value": {
								"value": "@pipeline().parameters.PARAM_OBJECT_TYPE",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_PIPELINE_NAME": {
							"value": {
								"value": "@pipeline().parameters.PARAM_PIPELINE_NAME",
								"type": "Expression"
							},
							"type": "String"
						},
						"VAR_PIPELINE_CURRENT_DATETIME": {
							"value": {
								"value": "@variables('VAR_PIPELINE_CURRENT_DATETIME')",
								"type": "Expression"
							},
							"type": "DateTime"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "azure_sql_sdlh_azir",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "truncate_etl_meta_and_columns",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "etl_metadata_mysql_objects",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ETL].[usp_TruncateMetaAndColumns]"
				},
				"linkedServiceName": {
					"referenceName": "azure_sql_sdlh_azir",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "etl_metadata_mysql_objects",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "lookup_etl_metadata_form",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "set_current_datetime",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('lookup_etl_metadata_form').output.value",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().OBJECT_TYPE, 'MYSQL')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "initialize_versions",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "for_each_table_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ETL].[usp_InitializeVersion]"
				},
				"linkedServiceName": {
					"referenceName": "azure_sql_sdlh_azir",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "set_current_datetime",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "VAR_PIPELINE_CURRENT_DATETIME",
					"value": {
						"value": "@convertFromUtc(pipeline().TriggerTime, 'GMT Standard Time')",
						"type": "Expression"
					}
				}
			}
		],
		"concurrency": 50,
		"parameters": {
			"PARAM_OBJECT_TYPE": {
				"type": "string",
				"defaultValue": "MYSQL"
			},
			"PARAM_PIPELINE_NAME": {
				"type": "string",
				"defaultValue": "mysql_lakehouse_update_metadata"
			},
			"PARAM_JSON_TRIGGER": {
				"type": "string",
				"defaultValue": [
					{
						"TRIGGER_NAME": "Sandbox",
						"TRIGGER_TYPE": "Scheduler"
					},
					{
						"TRIGGER_NAME": "Manual",
						"TRIGGER_TYPE": "Scheduler"
					}
				]
			}
		},
		"variables": {
			"VAR_LIST_OF_TABLES": {
				"type": "Array"
			},
			"VAR_LIST_OF_COLUMNS": {
				"type": "Array"
			},
			"VAR_PIPELINE_CURRENT_DATETIME": {
				"type": "String"
			}
		},
		"folder": {
			"name": "SDLH/MySQL"
		},
		"annotations": [],
		"lastPublishTime": "2023-07-25T15:14:03Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}