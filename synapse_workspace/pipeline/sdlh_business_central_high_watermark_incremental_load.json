{
	"name": "sdlh_business_central_high_watermark_incremental_load",
	"properties": {
		"activities": [
			{
				"name": "lookup_tables_watermark",
				"description": "Runs a query on Metadata DB to retrieve required items for supplied SOURCE_SYSTEM & PARAM_SOURCE_GROUPING_ID.  Its returns any enabled Tables where LOAD_TYPE is WATERMARK.  ( If LAST_WATERMARK_VALUE IS NULL it uses datetime value of '1900-01-01 00:00:00' to simulate a first run scenario )",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT [SOURCE_TYPE]\n    ,[SOURCE_SYSTEM]\n    ,[TABLE_NAME]\n    ,[COLUMNS_META]\n    ,[COLUMNS_LIST]\n    ,LOWER(REPLACE(CONCAT(SOURCE_TYPE,'_',SOURCE_SYSTEM,'_',TABLE_NAME),' ', '')) AS [OBJECT_NAME]\n    ,[WATERMARK_COLUMN]\n    ,CASE\n        WHEN LAST_WATERMARK_VALUE IS NULL THEN '1900-01-01 00:00:00'\n        ELSE LAST_WATERMARK_VALUE\n    END AS LAST_WATERMARK_VALUE\nFROM [ETL].[GenericTableMetadata]\nWHERE [SOURCE_TYPE] = '@{pipeline().parameters.PARAM_SOURCE_TYPE}'\nAND [SOURCE_SYSTEM] = '@{pipeline().parameters.PARAM_SOURCE_SYSTEM}'\nAND [SOURCE_GROUPING_ID] = @{pipeline().parameters.PARAM_SOURCE_GROUPING_ID}\nAND [IS_Enabled] = 1\nAND [LOAD_TYPE] = 'WATERMARK'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "sdlh_azuresql_db_metadata",
						"type": "DatasetReference",
						"parameters": {
							"METADATA_TABLE_NAME": "NA"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "for_each_table_watermark",
				"description": "This for loop iterates through the each required item from ETL.SQLTableMetadata and copies required data from source to datalake RAW",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "lookup_tables_watermark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "get_keyvault_secret_client_id",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "set_service_url",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('lookup_tables_watermark').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "lookup_new_watermark_value",
							"description": "Running a query against the table in the source system, to get the newest watermark datetime in the table.",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ODataSource",
									"query": {
										"value": "$select=@{item().WATERMARK_COLUMN}&$orderby=@{item().WATERMARK_COLUMN} desc&$top=1",
										"type": "Expression"
									},
									"httpRequestTimeout": "00:05:00"
								},
								"dataset": {
									"referenceName": "sdlh_odata_service_principal",
									"type": "DatasetReference",
									"parameters": {
										"SERVICE_URL": {
											"value": "@variables('VAR_SERVICE_URL')",
											"type": "Expression"
										},
										"ENTRA_RESOURCE_ID": {
											"value": "@variables('VAR_ENTRA_RESOURCE_ID')",
											"type": "Expression"
										},
										"TENANT_ID": {
											"value": "@activity('get_keyvault_secret_tenant_id').output.value",
											"type": "Expression"
										},
										"CLIENT_ID": {
											"value": "@activity('get_keyvault_secret_client_id').output.value",
											"type": "Expression"
										},
										"CLIENT_SECRET_NAME": {
											"value": "@pipeline().parameters.PARAM_CLIENT_SECRET_KEYVAULT_SECRET_NAME",
											"type": "Expression"
										},
										"PATH_URL": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "lookup_object_metadata_watermark",
							"description": "This lookup executes a stored procedure which returns object data from ETL.JsonMetadata from a supplied OBJECT_NAME",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[ETL].[usp_GetPipelineMetadataRetrieval]",
									"storedProcedureParameters": {
										"PARAM_DATETIME": {
											"type": "DateTime",
											"value": {
												"value": "@pipeline().parameters.PARAM_DATETIME",
												"type": "Expression"
											}
										},
										"PARAM_OBJECT_NAME": {
											"type": "String",
											"value": {
												"value": "@item().OBJECT_NAME",
												"type": "Expression"
											}
										},
										"PARAM_SOURCE_GROUPING_ID": {
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID",
												"type": "Expression"
											}
										},
										"PARAM_SOURCE_SYSTEM": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
												"type": "Expression"
											}
										},
										"PARAM_SOURCE_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "if_new_watermark_records_present",
							"description": "Check if the table has any updates before executing the required activities.",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "lookup_new_watermark_value",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "lookup_object_metadata_watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@greater(ticks(activity('lookup_new_watermark_value').output.firstRow[item().WATERMARK_COLUMN]), ticks(item().LAST_WATERMARK_VALUE))",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "create_log_entry_no_action_required",
										"description": "This lookup runs a stored procedure which generates a log entry in the ETL.Log table.",
										"type": "Lookup",
										"dependsOn": [],
										"policy": {
											"timeout": "0.00:10:00",
											"retry": 2,
											"retryIntervalInSeconds": 60,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderStoredProcedureName": "[ETL].[usp_InsertLog]",
												"storedProcedureParameters": {
													"SOURCE_TYPE": {
														"type": "String",
														"value": {
															"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
															"type": "Expression"
														}
													},
													"SOURCE_SYSTEM": {
														"type": "String",
														"value": {
															"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
															"type": "Expression"
														}
													},
													"SOURCE_GROUPING_ID": {
														"type": "Int32",
														"value": {
															"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID",
															"type": "Expression"
														}
													},
													"OBJECT_NAME": {
														"type": "String",
														"value": {
															"value": "@item().OBJECT_NAME",
															"type": "Expression"
														}
													},
													"DATABASE_NAME": {
														"type": "String",
														"value": null
													},
													"SCHEMA_NAME": {
														"type": "String",
														"value": null
													},
													"TABLE_NAME": {
														"type": "String",
														"value": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													},
													"TRIGGER_TIME": {
														"type": "DateTime",
														"value": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														}
													},
													"TRIGGER_TYPE": {
														"type": "String",
														"value": {
															"value": "@pipeline().TriggerType",
															"type": "Expression"
														}
													},
													"PIPELINE_RUN_ID": {
														"type": "String",
														"value": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														}
													},
													"PIPELINE_NAME": {
														"type": "String",
														"value": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														}
													},
													"TRIGGERING_PIPELINE_RUN_ID": {
														"type": "String",
														"value": {
															"value": "@pipeline().parameters.PARAM_TRIGGERING_PIPELINE_RUN_ID",
															"type": "Expression"
														}
													},
													"TRIGGERING_PIPELINE_NAME": {
														"type": "String",
														"value": {
															"value": "@pipeline().parameters.PARAM_TRIGGERING_PIPELINE_NAME",
															"type": "Expression"
														}
													},
													"OPERATION": {
														"type": "String",
														"value": "No Action Required"
													},
													"COMPONENT_NAME": {
														"type": "String",
														"value": {
															"value": "@toLower(concat('copy_',pipeline().parameters.PARAM_SOURCE_TYPE,'_to_raw_watermark'))",
															"type": "Expression"
														}
													},
													"TARGET_SYSTEM": {
														"type": "String",
														"value": null
													},
													"START_TIME": {
														"type": "DateTime",
														"value": {
															"value": "@utcnow()",
															"type": "Expression"
														}
													},
													"END_TIME": {
														"type": "DateTime",
														"value": {
															"value": "@utcnow()",
															"type": "Expression"
														}
													},
													"DURATION_SECONDS": {
														"type": "Int32",
														"value": null
													},
													"INSERTS": {
														"type": "Int32",
														"value": null
													},
													"UPDATES": {
														"type": "Int32",
														"value": null
													},
													"DELETES": {
														"type": "Int32",
														"value": null
													},
													"ERROR_MESSAGE": {
														"type": "String",
														"value": null
													},
													"NEW_INCREMENTAL_KEY_VALUE": {
														"type": "String",
														"value": null
													},
													"PREVIOUS_INCREMENTAL_KEY_VALUE": {
														"type": "String",
														"value": null
													}
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"dataset": {
												"referenceName": "sdlh_azuresql_db_metadata",
												"type": "DatasetReference",
												"parameters": {
													"METADATA_TABLE_NAME": "NA"
												}
											},
											"firstRowOnly": false
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "post_table_to_storage_queue_watermark",
										"description": "POST the table name into the Azure Storage Queue. ",
										"type": "WebActivity",
										"dependsOn": [
											{
												"activity": "update_etl_log_on_success_incremental_load",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.00:30:00",
											"retry": 2,
											"retryIntervalInSeconds": 60,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"method": "POST",
											"headers": {
												"x-ms-version": "2021-04-10",
												"x-ms-date": {
													"value": "@formatDateTime(utcnow(),'r')",
													"type": "Expression"
												}
											},
											"url": {
												"value": "@concat('https://', pipeline().parameters.PARAM_QUEUE_STORAGE_ACCOUNT, '.queue.core.windows.net/', pipeline().parameters.PARAM_QUEUE_NAME, '/messages?visibilitytimeout=30&timeout=30')",
												"type": "Expression"
											},
											"connectVia": {
												"referenceName": "AutoResolveIntegrationRuntime",
												"type": "IntegrationRuntimeReference"
											},
											"body": {
												"value": "@concat('<QueueMessage><MessageText>', item().TABLE_NAME, '</MessageText></QueueMessage>')",
												"type": "Expression"
											},
											"authentication": {
												"type": "MSI",
												"resource": "https://storage.azure.com/"
											}
										}
									},
									{
										"name": "copy_sql_to_parquet_raw_watermark",
										"description": "Copy activity that takes the source tables and writes them as Parquet in the RAW hierarchical namespace within ADLS.",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "create_log_entry_high_watermark_incremental_load",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 2,
											"retryIntervalInSeconds": 60,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "ODataSource",
												"query": {
													"value": "$select=@{item().COLUMNS_LIST}&$filter=@{item().WATERMARK_COLUMN} gt @{formatDateTime(item().LAST_WATERMARK_VALUE, 'yyyy-MM-ddTHH:mm:ss.fffffffZ')}&@{item().WATERMARK_COLUMN} le @{formatDateTime(activity('lookup_new_watermark_value').output.firstRow[item().WATERMARK_COLUMN], 'yyyy-MM-ddTHH:mm:ss.fffffffZ')}",
													"type": "Expression"
												},
												"httpRequestTimeout": "00:05:00"
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false
										},
										"inputs": [
											{
												"referenceName": "sdlh_odata_service_principal",
												"type": "DatasetReference",
												"parameters": {
													"SERVICE_URL": {
														"value": "@variables('VAR_SERVICE_URL')",
														"type": "Expression"
													},
													"ENTRA_RESOURCE_ID": {
														"value": "@variables('VAR_ENTRA_RESOURCE_ID')",
														"type": "Expression"
													},
													"TENANT_ID": {
														"value": "@activity('get_keyvault_secret_tenant_id').output.value",
														"type": "Expression"
													},
													"CLIENT_ID": {
														"value": "@activity('get_keyvault_secret_client_id').output.value",
														"type": "Expression"
													},
													"CLIENT_SECRET_NAME": {
														"value": "@pipeline().parameters.PARAM_CLIENT_SECRET_KEYVAULT_SECRET_NAME",
														"type": "Expression"
													},
													"PATH_URL": {
														"value": "@item().TABLE_NAME",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "sdlh_gen2_parquet_snappy",
												"type": "DatasetReference",
												"parameters": {
													"FP0": {
														"value": "@json(activity('lookup_object_metadata_watermark').output.firstRow.ADLS_PATHS)[0].raw[0].FP0",
														"type": "Expression"
													},
													"FP1": {
														"value": "@concat(json(activity('lookup_object_metadata_watermark').output.firstRow.ADLS_PATHS)[0].raw[0].FP1, activity('lookup_object_metadata_watermark').output.firstRow.HNS)",
														"type": "Expression"
													},
													"OBJECT_NAME": {
														"value": "@json(activity('lookup_object_metadata_watermark').output.firstRow.OBJECT_PARAMETERS)[0].TABLE_NAME",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "update_etl_log_on_success_incremental_load",
										"description": "Executes a stored procedure to update on success",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "copy_sql_to_parquet_raw_watermark",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.00:30:00",
											"retry": 2,
											"retryIntervalInSeconds": 60,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[ETL].[usp_UpdateLog]",
											"storedProcedureParameters": {
												"DELETES": {
													"value": null,
													"type": "Int32"
												},
												"DURATION_SECONDS": {
													"value": {
														"value": "@activity('copy_sql_to_parquet_raw_watermark').output.copyDuration",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"END_TIME": {
													"value": {
														"value": "@utcnow()",
														"type": "Expression"
													},
													"type": "DateTime"
												},
												"ERROR_MESSAGE": {
													"value": null,
													"type": "String"
												},
												"LOG_ID": {
													"value": {
														"value": "@activity('create_log_entry_high_watermark_incremental_load').output.value[0].LOG_ID",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"INSERTS": {
													"value": {
														"value": "@activity('copy_sql_to_parquet_raw_watermark').output.rowsCopied",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"UPDATES": {
													"value": null,
													"type": "Int32"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "azure_sql_data_no_param_azir",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "update_etl_log_on_failure_incremental_load",
										"description": "Executes a stored procedure to update on failure.",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "copy_sql_to_parquet_raw_watermark",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"timeout": "0.00:30:00",
											"retry": 2,
											"retryIntervalInSeconds": 60,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[ETL].[usp_UpdateLog]",
											"storedProcedureParameters": {
												"DELETES": {
													"value": null,
													"type": "Int32"
												},
												"DURATION_SECONDS": {
													"value": {
														"value": "@activity('copy_sql_to_parquet_raw_watermark').output.copyDuration",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"END_TIME": {
													"value": {
														"value": "@utcnow()",
														"type": "Expression"
													},
													"type": "DateTime"
												},
												"ERROR_MESSAGE": {
													"value": {
														"value": "@activity('copy_sql_to_parquet_raw_watermark').output.errors[0].Message",
														"type": "Expression"
													},
													"type": "String"
												},
												"LOG_ID": {
													"value": {
														"value": "@activity('create_log_entry_high_watermark_incremental_load').output.value[0].LOG_ID",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"INSERTS": {
													"value": null,
													"type": "Int32"
												},
												"UPDATES": {
													"value": null,
													"type": "Int32"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "azure_sql_data_no_param_azir",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "create_log_entry_high_watermark_incremental_load",
										"description": "This lookup runs a stored procedure which generates a log entry in the ETL.Log table.",
										"type": "Lookup",
										"dependsOn": [],
										"policy": {
											"timeout": "0.00:10:00",
											"retry": 2,
											"retryIntervalInSeconds": 60,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderStoredProcedureName": "[ETL].[usp_InsertLog]",
												"storedProcedureParameters": {
													"SOURCE_TYPE": {
														"type": "String",
														"value": {
															"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
															"type": "Expression"
														}
													},
													"SOURCE_SYSTEM": {
														"type": "String",
														"value": {
															"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
															"type": "Expression"
														}
													},
													"SOURCE_GROUPING_ID": {
														"type": "Int32",
														"value": {
															"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID",
															"type": "Expression"
														}
													},
													"OBJECT_NAME": {
														"type": "String",
														"value": {
															"value": "@item().OBJECT_NAME",
															"type": "Expression"
														}
													},
													"DATABASE_NAME": {
														"type": "String",
														"value": null
													},
													"SCHEMA_NAME": {
														"type": "String",
														"value": null
													},
													"TABLE_NAME": {
														"type": "String",
														"value": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													},
													"TRIGGER_TIME": {
														"type": "DateTime",
														"value": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														}
													},
													"TRIGGER_TYPE": {
														"type": "String",
														"value": {
															"value": "@pipeline().TriggerType",
															"type": "Expression"
														}
													},
													"PIPELINE_RUN_ID": {
														"type": "String",
														"value": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														}
													},
													"PIPELINE_NAME": {
														"type": "String",
														"value": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														}
													},
													"TRIGGERING_PIPELINE_RUN_ID": {
														"type": "String",
														"value": {
															"value": "@pipeline().parameters.PARAM_TRIGGERING_PIPELINE_RUN_ID",
															"type": "Expression"
														}
													},
													"TRIGGERING_PIPELINE_NAME": {
														"type": "String",
														"value": {
															"value": "@pipeline().parameters.PARAM_TRIGGERING_PIPELINE_NAME",
															"type": "Expression"
														}
													},
													"OPERATION": {
														"type": "String",
														"value": "Copy Activity"
													},
													"COMPONENT_NAME": {
														"type": "String",
														"value": {
															"value": "@toLower(concat('copy_',pipeline().parameters.PARAM_SOURCE_TYPE,'_to_raw_watermark'))",
															"type": "Expression"
														}
													},
													"TARGET_SYSTEM": {
														"type": "String",
														"value": "ADLS_RAW"
													},
													"START_TIME": {
														"type": "DateTime",
														"value": {
															"value": "@utcnow()",
															"type": "Expression"
														}
													},
													"END_TIME": {
														"type": "DateTime",
														"value": null
													},
													"DURATION_SECONDS": {
														"type": "Int32",
														"value": null
													},
													"INSERTS": {
														"type": "Int32",
														"value": null
													},
													"UPDATES": {
														"type": "Int32",
														"value": null
													},
													"DELETES": {
														"type": "Int32",
														"value": null
													},
													"ERROR_MESSAGE": {
														"type": "String",
														"value": null
													},
													"NEW_INCREMENTAL_KEY_VALUE": {
														"type": "String",
														"value": {
															"value": "@formatDateTime(activity('lookup_new_watermark_value').output.firstRow[item().WATERMARK_COLUMN], 'yyyy-MM-dd HH:mm:ss.fffffff')",
															"type": "Expression"
														}
													},
													"PREVIOUS_INCREMENTAL_KEY_VALUE": {
														"type": "String",
														"value": {
															"value": "@formatDateTime(item().LAST_WATERMARK_VALUE, 'yyyy-MM-dd HH:mm:ss.fffffff')",
															"type": "Expression"
														}
													}
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"dataset": {
												"referenceName": "sdlh_azuresql_db_metadata",
												"type": "DatasetReference",
												"parameters": {
													"METADATA_TABLE_NAME": "NA"
												}
											},
											"firstRowOnly": false
										}
									},
									{
										"name": "update_etl_log_on_failure_incremental_load_try2",
										"description": "Executes a stored procedure to update on failure.",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "update_etl_log_on_failure_incremental_load",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"timeout": "0.00:30:00",
											"retry": 2,
											"retryIntervalInSeconds": 60,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[ETL].[usp_UpdateLog]",
											"storedProcedureParameters": {
												"DELETES": {
													"value": null,
													"type": "Int32"
												},
												"DURATION_SECONDS": {
													"value": null,
													"type": "Int32"
												},
												"END_TIME": {
													"value": {
														"value": "@utcnow()",
														"type": "Expression"
													},
													"type": "DateTime"
												},
												"ERROR_MESSAGE": {
													"value": {
														"value": "@activity('copy_sql_to_parquet_raw_watermark').error?.message",
														"type": "Expression"
													},
													"type": "String"
												},
												"LOG_ID": {
													"value": {
														"value": "@activity('create_log_entry_high_watermark_incremental_load').output.value[0].LOG_ID",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"INSERTS": {
													"value": null,
													"type": "Int32"
												},
												"UPDATES": {
													"value": null,
													"type": "Int32"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "azure_sql_data_no_param_azir",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "lookup_pipeline_parameters",
				"description": "Execute the stored procedure [Config].[usp_GetPipelineParameters] to return the pipeline parameters.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderStoredProcedureName": "[Config].[usp_GetPipelineParameters]",
						"storedProcedureParameters": {
							"Workspace": {
								"type": "String",
								"value": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "serverless_metadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "get_keyvault_secret_client_id",
				"description": "Used to retrieve secret from key vault",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "lookup_pipeline_parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:30:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"url": {
						"value": "@concat(activity('lookup_pipeline_parameters').output.firstRow.KEY_VAULT_URI,'secrets/',pipeline().parameters.PARAM_CLIENT_ID_KEYVAULT_SECRET_NAME,'/?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "get_keyvault_secret_tenant_id",
				"description": "Used to retrieve secret from key vault",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "lookup_pipeline_parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:30:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"url": {
						"value": "@concat(activity('lookup_pipeline_parameters').output.firstRow.KEY_VAULT_URI,'secrets/azure-ad-tenant-id/?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "set_service_url",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "get_keyvault_secret_tenant_id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "VAR_SERVICE_URL",
					"value": {
						"value": "@concat('https://api.businesscentral.dynamics.com/v2.0/',activity('get_keyvault_secret_tenant_id').output.value,'/',activity('lookup_pipeline_parameters').output.firstRow.BUSINESS_CENTRAL_ENVIRONMENT_NAME,'/ODataV4/')",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"PARAM_SOURCE_TYPE": {
				"type": "string"
			},
			"PARAM_SOURCE_SYSTEM": {
				"type": "string"
			},
			"PARAM_SOURCE_GROUPING_ID": {
				"type": "int"
			},
			"PARAM_QUEUE_STORAGE_ACCOUNT": {
				"type": "string"
			},
			"PARAM_QUEUE_NAME": {
				"type": "string"
			},
			"PARAM_DATETIME": {
				"type": "string"
			},
			"PARAM_TRIGGERING_PIPELINE_NAME": {
				"type": "string"
			},
			"PARAM_TRIGGERING_PIPELINE_RUN_ID": {
				"type": "string"
			},
			"PARAM_CLIENT_ID_KEYVAULT_SECRET_NAME": {
				"type": "string"
			},
			"PARAM_CLIENT_SECRET_KEYVAULT_SECRET_NAME": {
				"type": "string"
			}
		},
		"variables": {
			"VAR_ENTRA_RESOURCE_ID": {
				"type": "String",
				"defaultValue": "https://api.businesscentral.dynamics.com"
			},
			"VAR_SERVICE_URL": {
				"type": "String"
			}
		},
		"folder": {
			"name": "SDLH/Web_Services/Business_Central/Support"
		},
		"annotations": [],
		"lastPublishTime": "2023-03-03T16:57:45Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}