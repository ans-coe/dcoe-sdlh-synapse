{
	"name": "sdlh_salesforce_full_load",
	"properties": {
		"activities": [
			{
				"name": "for_each_table_metadata",
				"description": "This for loop iterates through the each required item and loads required metadata into the Metadata DB.  Tables included are ETL.SQLTableMetadata & ETL.SQLColumnMetadata & ETL.JsonMetadata",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "lookup_tables_full_load",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "get_keyvault_secret_client_id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('lookup_tables_full_load').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "copy_to_parquet_raw_full_load",
							"description": "Copy activity that takes source tables and writes them as Parquet in the RAW hierarchical namespace within ADLS.",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "create_log_entry_full_load",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SalesforceV2Source",
									"SOQLQuery": {
										"value": "SELECT @{item().COLUMNS_LIST}\nFROM @{item().TABLE_NAME}",
										"type": "Expression"
									},
									"includeDeletedObjects": false
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": false,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sdlh_salesforce_object",
									"type": "DatasetReference",
									"parameters": {
										"API_VERSION": {
											"value": "@pipeline().parameters.PARAM_API_VERSION",
											"type": "Expression"
										},
										"OUTH_CLIENT_ID": {
											"value": "@activity('get_keyvault_secret_client_id').output.value",
											"type": "Expression"
										},
										"OUTH_CLIENT_SECRET_NAME": {
											"value": "@pipeline().parameters.PARAM_CLIENT_SECRET_KEYVAULT_SECRET_NAME",
											"type": "Expression"
										},
										"ENVIRONMENT_URL": {
											"value": "@pipeline().parameters.PARAM_ENVIRONMENT_URL",
											"type": "Expression"
										},
										"OBJECT_NAME": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sdlh_gen2_parquet_snappy",
									"type": "DatasetReference",
									"parameters": {
										"FP0": {
											"value": "@json(activity('lookup_object_metadata_full_load').output.firstRow.ADLS_PATHS)[0].raw[0].FP0",
											"type": "Expression"
										},
										"FP1": {
											"value": "@concat(json(activity('lookup_object_metadata_full_load').output.firstRow.ADLS_PATHS)[0].raw[0].FP1, activity('lookup_object_metadata_full_load').output.firstRow.HNS)",
											"type": "Expression"
										},
										"OBJECT_NAME": {
											"value": "@json(activity('lookup_object_metadata_full_load').output.firstRow.OBJECT_PARAMETERS)[0].TABLE_NAME",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "create_log_entry_full_load",
							"description": "This lookup runs a stored procedure which generates a log entry in the ETL.Log table.",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "lookup_object_metadata_full_load",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[ETL].[usp_InsertLog]",
									"storedProcedureParameters": {
										"SOURCE_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
												"type": "Expression"
											}
										},
										"SOURCE_SYSTEM": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
												"type": "Expression"
											}
										},
										"SOURCE_GROUPING_ID": {
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID",
												"type": "Expression"
											}
										},
										"OBJECT_NAME": {
											"type": "String",
											"value": {
												"value": "@toLower(replace(concat(pipeline().parameters.PARAM_SOURCE_TYPE,'_',pipeline().parameters.PARAM_SOURCE_SYSTEM,'_',item().TABLE_NAME),' ' ,''))",
												"type": "Expression"
											}
										},
										"DATABASE_NAME": {
											"type": "String",
											"value": null
										},
										"SCHEMA_NAME": {
											"type": "String",
											"value": null
										},
										"TABLE_NAME": {
											"type": "String",
											"value": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										},
										"TRIGGER_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										},
										"TRIGGER_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											}
										},
										"PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										},
										"PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											}
										},
										"OPERATION": {
											"type": "String",
											"value": "Copy Activity"
										},
										"COMPONENT_NAME": {
											"type": "String",
											"value": {
												"value": "@toLower(concat('copy_',pipeline().parameters.PARAM_SOURCE_TYPE,'_to_raw_full_load'))",
												"type": "Expression"
											}
										},
										"TARGET_SYSTEM": {
											"type": "String",
											"value": "ADLS_RAW"
										},
										"START_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										},
										"END_TIME": {
											"type": "DateTime",
											"value": null
										},
										"DURATION_SECONDS": {
											"type": "Int32",
											"value": null
										},
										"INSERTS": {
											"type": "Int32",
											"value": null
										},
										"UPDATES": {
											"type": "Int32",
											"value": null
										},
										"DELETES": {
											"type": "Int32",
											"value": null
										},
										"ERROR_MESSAGE": {
											"type": "String",
											"value": null
										},
										"NEW_INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": null
										},
										"PREVIOUS_INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": null
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "update_etl_log_on_success_full_load",
							"description": "Executes a stored procedure to update on success",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "copy_to_parquet_raw_full_load",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_UpdateLog]",
								"storedProcedureParameters": {
									"DELETES": {
										"value": null,
										"type": "Int32"
									},
									"DURATION_SECONDS": {
										"value": {
											"value": "@activity('copy_to_parquet_raw_full_load').output.copyDuration",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"END_TIME": {
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"ERROR_MESSAGE": {
										"value": null,
										"type": "String"
									},
									"LOG_ID": {
										"value": {
											"value": "@activity('create_log_entry_full_load').output.value[0].LOG_ID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"INSERTS": {
										"value": {
											"value": "@activity('copy_to_parquet_raw_full_load').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"UPDATES": {
										"value": null,
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "azure_sql_data_no_param_azir",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "update_etl_log_on_failure_full_load",
							"description": "Executes a stored procedure to update on failure.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "copy_to_parquet_raw_full_load",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_UpdateLog]",
								"storedProcedureParameters": {
									"DELETES": {
										"value": null,
										"type": "Int32"
									},
									"DURATION_SECONDS": {
										"value": null,
										"type": "Int32"
									},
									"END_TIME": {
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"ERROR_MESSAGE": {
										"value": {
											"value": "@activity('copy_to_parquet_raw_full_load').output.errors[0].Message",
											"type": "Expression"
										},
										"type": "String"
									},
									"LOG_ID": {
										"value": {
											"value": "@activity('create_log_entry_full_load').output.value[0].LOG_ID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"INSERTS": {
										"value": null,
										"type": "Int32"
									},
									"UPDATES": {
										"value": null,
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "azure_sql_data_no_param_azir",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "lookup_object_metadata_full_load",
							"description": "This lookup executes a stored procedure which returns object data from ETL.JsonMetadata from a supplied OBJECT_NAME",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[ETL].[usp_GetPipelineMetadataRetrieval]",
									"storedProcedureParameters": {
										"PARAM_DATETIME": {
											"type": "DateTime",
											"value": {
												"value": "@pipeline().parameters.PARAM_DATETIME",
												"type": "Expression"
											}
										},
										"PARAM_OBJECT_NAME": {
											"type": "String",
											"value": {
												"value": "@item().OBJECT_NAME",
												"type": "Expression"
											}
										},
										"PARAM_SOURCE_GROUPING_ID": {
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID",
												"type": "Expression"
											}
										},
										"PARAM_SOURCE_SYSTEM": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
												"type": "Expression"
											}
										},
										"PARAM_SOURCE_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "post_table_to_storage_queue_full_load",
							"description": "POST the table name into the Azure Storage Queue. ",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "update_etl_log_on_success_full_load",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"method": "POST",
								"headers": {
									"x-ms-version": "2021-04-10",
									"x-ms-date": {
										"value": "@formatDateTime(utcnow(),'r')",
										"type": "Expression"
									}
								},
								"url": {
									"value": "@concat('https://', pipeline().parameters.PARAM_QUEUE_STORAGE_ACCOUNT, '.queue.core.windows.net/', pipeline().parameters.PARAM_QUEUE_NAME, '/messages?visibilitytimeout=30&timeout=30')",
									"type": "Expression"
								},
								"connectVia": {
									"referenceName": "AutoResolveIntegrationRuntime",
									"type": "IntegrationRuntimeReference"
								},
								"body": {
									"value": "@concat('<QueueMessage><MessageText>', item().TABLE_NAME, '</MessageText></QueueMessage>')",
									"type": "Expression"
								},
								"authentication": {
									"type": "MSI",
									"resource": "https://storage.azure.com/"
								}
							}
						},
						{
							"name": "update_etl_log_on_failure_full_load_try2",
							"description": "Executes a stored procedure to update on failure.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "update_etl_log_on_failure_full_load",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_UpdateLog]",
								"storedProcedureParameters": {
									"DELETES": {
										"value": null,
										"type": "Int32"
									},
									"DURATION_SECONDS": {
										"value": null,
										"type": "Int32"
									},
									"END_TIME": {
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"ERROR_MESSAGE": {
										"value": {
											"value": "@activity('copy_to_parquet_raw_full_load').error?.message",
											"type": "Expression"
										},
										"type": "String"
									},
									"LOG_ID": {
										"value": {
											"value": "@activity('create_log_entry_full_load').output.value[0].LOG_ID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"INSERTS": {
										"value": null,
										"type": "Int32"
									},
									"UPDATES": {
										"value": null,
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "azure_sql_data_no_param_azir",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "lookup_tables_full_load",
				"description": "Runs a query on Metadata DB to retrieve required items for supplied SOURCE_SYSTEM & PARAM_SOURCE_GROUPING_ID.  Its returns any enabled Tables where LOAD_TYPE is FULL_LOAD",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT [SOURCE_TYPE]\n    ,[SOURCE_SYSTEM]\n    ,[TABLE_NAME]\n    ,[COLUMNS_LIST]\n    ,LOWER(REPLACE(CONCAT(SOURCE_TYPE,'_',SOURCE_SYSTEM,'_',TABLE_NAME),' ', '')) AS [OBJECT_NAME]\n    ,[PRIMARY_KEYS]\n    ,[LOAD_TYPE]\nFROM [ETL].[GenericTableMetadata]\nWHERE [SOURCE_TYPE] = '@{pipeline().parameters.PARAM_SOURCE_TYPE}'\nAND [SOURCE_SYSTEM] = '@{pipeline().parameters.PARAM_SOURCE_SYSTEM}'\nAND [SOURCE_GROUPING_ID] = @{pipeline().parameters.PARAM_SOURCE_GROUPING_ID}\nAND [IS_Enabled] = 1\nAND [LOAD_TYPE] = 'FULL_LOAD'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "sdlh_azuresql_db_metadata",
						"type": "DatasetReference",
						"parameters": {
							"METADATA_TABLE_NAME": "NA"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "get_keyvault_secret_client_id",
				"description": "Used to retrieve secret from key vault",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "lookup_pipeline_parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:30:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"url": {
						"value": "@concat(activity('lookup_pipeline_parameters').output.firstRow.KEY_VAULT_URI,'secrets/',pipeline().parameters.PARAM_CLIENT_ID_KEYVAULT_SECRET_NAME,'/?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "lookup_pipeline_parameters",
				"description": "Execute the stored procedure [Config].[usp_GetPipelineParameters] to return the pipeline parameters.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderStoredProcedureName": "[Config].[usp_GetPipelineParameters]",
						"storedProcedureParameters": {
							"Workspace": {
								"type": "String",
								"value": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "serverless_metadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			}
		],
		"concurrency": 50,
		"parameters": {
			"PARAM_SOURCE_TYPE": {
				"type": "string"
			},
			"PARAM_SOURCE_SYSTEM": {
				"type": "string"
			},
			"PARAM_SOURCE_GROUPING_ID": {
				"type": "int"
			},
			"PARAM_QUEUE_STORAGE_ACCOUNT": {
				"type": "string"
			},
			"PARAM_QUEUE_NAME": {
				"type": "string"
			},
			"PARAM_DATETIME": {
				"type": "string"
			},
			"PARAM_TRIGGERING_PIPELINE_NAME": {
				"type": "string"
			},
			"PARAM_TRIGGERING_PIPELINE_RUN_ID": {
				"type": "string"
			},
			"PARAM_CLIENT_ID_KEYVAULT_SECRET_NAME": {
				"type": "string"
			},
			"PARAM_CLIENT_SECRET_KEYVAULT_SECRET_NAME": {
				"type": "string"
			},
			"PARAM_API_VERSION": {
				"type": "string"
			},
			"PARAM_ENVIRONMENT_URL": {
				"type": "string"
			}
		},
		"folder": {
			"name": "SDLH/Web_Services/Salesforce/Support"
		},
		"annotations": [],
		"lastPublishTime": "2023-07-25T15:14:09Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}