{
	"name": "sdlh_enriched_delta_external_tables",
	"properties": {
		"description": "Pipeline to read RAW parquet files, then land as delta files in the ENRICHED and create external tables a SERVERLESS database",
		"activities": [
			{
				"name": "get_queue_message_count",
				"description": "Gets inputted queues metadata, we are using to get the queues message count.",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "lookup_pipeline_parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"headers": {
						"x-ms-date": {
							"value": "@formatDateTime(utcnow(),'r')",
							"type": "Expression"
						},
						"x-ms-version": "2021-04-10"
					},
					"url": {
						"value": "@concat('https://', activity('lookup_pipeline_parameters').output.firstRow.DATALAKE_STORAGE_NAME, '.queue.core.windows.net/', pipeline().parameters.PARAM_STORAGE_QUEUE_NAME,'?comp=metadata')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"body": "NA",
					"authentication": {
						"type": "MSI",
						"resource": "https://storage.azure.com/"
					}
				}
			},
			{
				"name": "lookup_pipeline_parameters",
				"description": "Execute the stored procedure [Config].[usp_GetPipelineParameters] to return the pipeline parameters.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderStoredProcedureName": "[Config].[usp_GetPipelineParameters]",
						"storedProcedureParameters": {
							"Workspace": {
								"type": "String",
								"value": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "serverless_metadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "set_queue_count",
				"description": "Sets the inputted queues count as a variable for usage in the if statement",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "get_queue_message_count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "VAR_STORAGE_QUEUE_COUNT",
					"value": {
						"value": "@int(activity('get_queue_message_count').output.ADFWebActivityResponseHeaders['x-ms-approximate-messages-count'])",
						"type": "Expression"
					}
				}
			},
			{
				"name": "if_messages_on_queue",
				"description": "Check if there are messages on the inputted queue.  If count is 0 there is no point calling the notebook.",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "set_queue_count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(variables('VAR_STORAGE_QUEUE_COUNT'),0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "enriched_delta_external_tables",
							"description": "This notebook performs the ETL process between Parquet RAW and Delta files in ENRICHED based on the storage queue messages.  With the help of metadata stored in the metadata DB, It uses information schema from the source system. It maps the datatypes to the closest datatype that exists in serverless SQL pool, and creates external tables with a very similar schema to the source tables.",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "nb_lakehouse_orchestration_py",
									"type": "NotebookReference"
								},
								"parameters": {
									"PARAM_SOURCE_TYPE": {
										"value": {
											"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
											"type": "Expression"
										},
										"type": "string"
									},
									"PARAM_SOURCE_SYSTEM": {
										"value": {
											"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
											"type": "Expression"
										},
										"type": "string"
									},
									"PARAM_SOURCE_GROUPING_ID": {
										"value": {
											"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID",
											"type": "Expression"
										},
										"type": "int"
									},
									"PARAM_STORAGE_QUEUE_NAME": {
										"value": {
											"value": "@pipeline().parameters.PARAM_STORAGE_QUEUE_NAME",
											"type": "Expression"
										},
										"type": "string"
									},
									"PARAM_PIPELINE_NAME": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "string"
									},
									"PARAM_PIPELINE_RUN_ID": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"PARAM_TRIGGERING_PIPELINE_NAME": {
										"value": {
											"value": "@pipeline().parameters.PARAM_TRIGGERING_PIPELINE_NAME",
											"type": "Expression"
										},
										"type": "string"
									},
									"PARAM_TRIGGERING_PIPELINE_RUN_ID": {
										"value": {
											"value": "@pipeline().parameters.PARAM_TRIGGERING_PIPELINE_RUN_ID",
											"type": "Expression"
										},
										"type": "string"
									},
									"PARAM_TRIGGER_TYPE": {
										"value": {
											"value": "@pipeline().TriggerType",
											"type": "Expression"
										},
										"type": "string"
									},
									"PARAM_TRIGGER_TIME": {
										"value": {
											"value": "@pipeline().parameters.PARAM_TRIGGER_TIME",
											"type": "Expression"
										},
										"type": "string"
									}
								},
								"snapshot": true,
								"sparkPool": {
									"referenceName": "synspsm33as34",
									"type": "BigDataPoolReference"
								},
								"executorSize": "Small",
								"conf": {
									"spark.dynamicAllocation.enabled": false,
									"spark.dynamicAllocation.minExecutors": 2,
									"spark.dynamicAllocation.maxExecutors": 2
								},
								"driverSize": "Small",
								"numExecutors": 2
							}
						}
					]
				}
			}
		],
		"parameters": {
			"PARAM_SOURCE_TYPE": {
				"type": "string"
			},
			"PARAM_SOURCE_SYSTEM": {
				"type": "string"
			},
			"PARAM_SOURCE_GROUPING_ID": {
				"type": "int"
			},
			"PARAM_STORAGE_QUEUE_NAME": {
				"type": "string"
			},
			"PARAM_TRIGGER_TIME": {
				"type": "string"
			},
			"PARAM_TRIGGERING_PIPELINE_NAME": {
				"type": "string"
			},
			"PARAM_TRIGGERING_PIPELINE_RUN_ID": {
				"type": "string"
			}
		},
		"variables": {
			"VAR_STORAGE_QUEUE_COUNT": {
				"type": "Integer"
			}
		},
		"folder": {
			"name": "SDLH/Common"
		},
		"annotations": []
	}
}