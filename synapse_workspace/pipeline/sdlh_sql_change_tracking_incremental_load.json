{
	"name": "sdlh_sql_change_tracking_incremental_load",
	"properties": {
		"activities": [
			{
				"name": "lookup_tables_change_tracking",
				"description": "Runs a query on Metadata DB to retrieve required items for supplied SOURCE_SYSTEM & PARAM_SOURCE_GROUPING_ID.  Its returns any enabled Tables where LOAD_TYPE is CHANGE_TRACKING and LAST_CHANGE_TRACKING_VALUE IS NOT NULL",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT [LOAD_TYPE]\n    ,[SOURCE_SYSTEM]\n    ,[SOURCE_CONNECTION_STRING]\n    ,[DATABASE_NAME]\n    ,[SCHEMA_NAME]\n    ,[TABLE_NAME]\n    ,[COLUMNS_META]\n    ,CONCAT(REPLACE(REPLACE(REPLACE(SOURCE_SYSTEM,'.','_'), '-','_'), '\\', '_'), '_',DATABASE_NAME,'_', SCHEMA_NAME, '_',TABLE_NAME) AS [OBJECT_NAME]\n    ,[PRIMARY_KEYS]\n    ,[LAST_CHANGE_TRACKING_VALUE]\nFROM [ETL].[SQLTableMetadata]\nWHERE [SOURCE_SYSTEM] = '@{pipeline().parameters.PARAM_SOURCE_SYSTEM}'\nAND [SOURCE_GROUPING_ID] = @{pipeline().parameters.PARAM_SOURCE_GROUPING_ID}\nAND [IS_Enabled] = 1\nAND [LOAD_TYPE] = 'CHANGE_TRACKING'\nAND [LAST_CHANGE_TRACKING_VALUE] IS NOT NULL\nORDER BY [LAST_CHANGE_TRACKING_VALUE] DESC",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "sdlh_azuresql_db_metadata",
						"type": "DatasetReference",
						"parameters": {
							"METADATA_TABLE_NAME": "NA"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "for_each_change_tracking_table",
				"description": "This for loop iterates through the each required item from ETL.SQLTableMetadata and copies required data from source to datalake RAW",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "filter_changed_tables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('filter_changed_tables').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "lookup_object_metadata_change_tracking",
							"description": "This lookup executes a stored procedure which returns object data from ETL.JsonMetadata from a supplied OBJECT_NAME",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[ETL].[usp_GetPipelineMetadataRetrieval]",
									"storedProcedureParameters": {
										"PARAM_DATETIME": {
											"type": "DateTime",
											"value": {
												"value": "@pipeline().parameters.PARAM_DATETIME",
												"type": "Expression"
											}
										},
										"PARAM_OBJECT_NAME": {
											"type": "String",
											"value": {
												"value": "@item().OBJECT_NAME",
												"type": "Expression"
											}
										},
										"PARAM_SOURCE_GROUPING_ID": {
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID",
												"type": "Expression"
											}
										},
										"PARAM_SOURCE_SYSTEM": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
												"type": "Expression"
											}
										},
										"PARAM_SOURCE_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "copy_sql_to_parquet_raw_change_tracking",
							"description": "Copy activity that takes SQL server tables and writes them as Parquet in the RAW hierarchical namespace within ADLS.",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "create_log_entry_change_tracking",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "SELECT @{json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].COLUMNS_META}\n    ,CT.@{json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].PRIMARY_KEYS} AS PK_VALUE\n    ,SYS_CHANGE_OPERATION\nFROM [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}] S\nRIGHT OUTER JOIN CHANGETABLE(CHANGES [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}], @{activity('lookup_old_sys_change_version').output.firstRow.LAST_CHANGE_TRACKING_VALUE}) AS CT\n    ON S.@{json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].PRIMARY_KEYS} = CT.@{json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].PRIMARY_KEYS} WHERE CT.SYS_CHANGE_VERSION <= @{item().NEW_CHANGE_TRACKING_VALUE}",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sdlh_sql_db_table",
									"type": "DatasetReference",
									"parameters": {
										"SOURCE_CONNECTION_STRING": {
											"value": "@item().SOURCE_CONNECTION_STRING",
											"type": "Expression"
										},
										"SCHEMA_NAME": "NA",
										"TABLE_NAME": "NA"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sdlh_gen2_parquet_snappy",
									"type": "DatasetReference",
									"parameters": {
										"FP0": {
											"value": "@json(activity('lookup_object_metadata_change_tracking').output.firstRow.ADLS_PATHS)[0].raw[0].FP0",
											"type": "Expression"
										},
										"FP1": {
											"value": "@concat(json(activity('lookup_object_metadata_change_tracking').output.firstRow.ADLS_PATHS)[0].raw[0].FP1, activity('lookup_object_metadata_change_tracking').output.firstRow.HNS)",
											"type": "Expression"
										},
										"OBJECT_NAME": {
											"value": "@json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].TABLE_NAME",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "update_etl_log_on_success_incremental_load",
							"description": "Executes a stored procedure to update on success",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "copy_sql_to_parquet_raw_change_tracking",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "lookup_change_tracking_counts",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_UpdateLog]",
								"storedProcedureParameters": {
									"DURATION_SECONDS": {
										"value": {
											"value": "@activity('copy_sql_to_parquet_raw_change_tracking').output.copyDuration",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"END_TIME": {
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"ERROR_MESSAGE": {
										"value": null,
										"type": "String"
									},
									"LOG_ID": {
										"value": {
											"value": "@activity('create_log_entry_change_tracking').output.value[0].LOG_ID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"INSERTS": {
										"value": {
											"value": "@activity('lookup_change_tracking_counts').output.firstRow.INSERTS",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"UPDATES": {
										"value": {
											"value": "@activity('lookup_change_tracking_counts').output.firstRow.UPDATES",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"DELETES": {
										"value": {
											"value": "@activity('lookup_change_tracking_counts').output.firstRow.DELETES",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "azure_sql_data_no_param_azir",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "update_etl_log_on_failure_incremental_load",
							"description": "Executes a stored procedure to update on failure.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "copy_sql_to_parquet_raw_change_tracking",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_UpdateLog]",
								"storedProcedureParameters": {
									"DELETES": {
										"value": null,
										"type": "Int32"
									},
									"DURATION_SECONDS": {
										"value": null,
										"type": "Int32"
									},
									"END_TIME": {
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"ERROR_MESSAGE": {
										"value": {
											"value": "@activity('copy_sql_to_parquet_raw_change_tracking').output.errors[0].Message",
											"type": "Expression"
										},
										"type": "String"
									},
									"LOG_ID": {
										"value": {
											"value": "@activity('create_log_entry_change_tracking').output.value[0].LOG_ID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"INSERTS": {
										"value": null,
										"type": "Int32"
									},
									"UPDATES": {
										"value": null,
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "azure_sql_data_no_param_azir",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "create_log_entry_change_tracking",
							"description": "This lookup runs a stored procedure which generates a log entry in the ETL.Log table.",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "lookup_object_metadata_change_tracking",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "lookup_old_sys_change_version",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[ETL].[usp_InsertLog]",
									"storedProcedureParameters": {
										"COMPONENT_NAME": {
											"type": "String",
											"value": "copy_sql_to_raw_change_tracking"
										},
										"DATABASE_NAME": {
											"type": "String",
											"value": {
												"value": "@item().DATABASE_NAME",
												"type": "Expression"
											}
										},
										"DELETES": {
											"type": "Int32",
											"value": null
										},
										"DURATION_SECONDS": {
											"type": "Int32",
											"value": null
										},
										"END_TIME": {
											"type": "DateTime",
											"value": null
										},
										"ERROR_MESSAGE": {
											"type": "String",
											"value": null
										},
										"INSERTS": {
											"type": "Int32",
											"value": null
										},
										"OPERATION": {
											"type": "String",
											"value": "Copy Activity"
										},
										"PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										},
										"PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										},
										"SCHEMA_NAME": {
											"type": "String",
											"value": {
												"value": "@item().SCHEMA_NAME",
												"type": "Expression"
											}
										},
										"SOURCE_SYSTEM": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
												"type": "Expression"
											}
										},
										"START_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										},
										"TABLE_NAME": {
											"type": "String",
											"value": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										},
										"TARGET_SYSTEM": {
											"type": "String",
											"value": "ADLS_RAW"
										},
										"TRIGGER_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											}
										},
										"TRIGGER_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										},
										"TRIGGER_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										},
										"UPDATES": {
											"type": "Int32",
											"value": null
										},
										"INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": {
												"value": "@item().NEW_CHANGE_TRACKING_VALUE",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "post_table_to_storage_queue_change_tracking",
							"description": "POST the table name into the Azure Storage Queue. ",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "update_etl_log_on_success_incremental_load",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "@concat('https://', pipeline().parameters.PARAM_QUEUE_STORAGE_ACCOUNT, '.queue.core.windows.net/', pipeline().parameters.PARAM_QUEUE_NAME, '/messages?visibilitytimeout=30&timeout=30')",
									"type": "Expression"
								},
								"connectVia": {
									"referenceName": "AutoResolveIntegrationRuntime",
									"type": "IntegrationRuntimeReference"
								},
								"method": "POST",
								"headers": {
									"x-ms-version": "2021-04-10",
									"x-ms-date": {
										"value": "@formatDateTime(utcnow(),'r')",
										"type": "Expression"
									}
								},
								"body": {
									"value": "@concat('<QueueMessage><MessageText>', item().TABLE_NAME, '</MessageText></QueueMessage>')",
									"type": "Expression"
								},
								"authentication": {
									"type": "MSI",
									"resource": "https://storage.azure.com/"
								}
							}
						},
						{
							"name": "lookup_change_tracking_counts",
							"description": "Lookup counts for INSERTS or UPDATES for ETL.Log",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "copy_sql_to_parquet_raw_change_tracking",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "SELECT\n    (SELECT COUNT(*)\n    FROM [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}] S\n    RIGHT OUTER JOIN CHANGETABLE(CHANGES [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}], @{activity('lookup_old_sys_change_version').output.firstRow.LAST_CHANGE_TRACKING_VALUE}) AS CT\n        ON S.@{json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].PRIMARY_KEYS} = CT.@{json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].PRIMARY_KEYS}\n    WHERE SYS_CHANGE_OPERATION = 'U' AND CT.SYS_CHANGE_VERSION <= @{item().NEW_CHANGE_TRACKING_VALUE}) AS UPDATES,\n    (SELECT COUNT(*)\n    FROM [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}] S\n    RIGHT OUTER JOIN CHANGETABLE(CHANGES [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}], @{activity('lookup_old_sys_change_version').output.firstRow.LAST_CHANGE_TRACKING_VALUE}) AS CT\n        ON S.@{json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].PRIMARY_KEYS} = CT.@{json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].PRIMARY_KEYS}\n    WHERE SYS_CHANGE_OPERATION = 'I' and CT.SYS_CHANGE_VERSION <= @{item().NEW_CHANGE_TRACKING_VALUE}) AS INSERTS,\n    (SELECT COUNT(*)\n    FROM [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}] S\n    RIGHT OUTER JOIN CHANGETABLE(CHANGES [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}], @{activity('lookup_old_sys_change_version').output.firstRow.LAST_CHANGE_TRACKING_VALUE}) AS CT\n        ON S.@{json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].PRIMARY_KEYS} = CT.@{json(activity('lookup_object_metadata_change_tracking').output.firstRow.OBJECT_PARAMETERS)[0].PRIMARY_KEYS}\n    WHERE SYS_CHANGE_OPERATION = 'D' and CT.SYS_CHANGE_VERSION <= @{item().NEW_CHANGE_TRACKING_VALUE}) AS DELETES",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_sql_db_table",
									"type": "DatasetReference",
									"parameters": {
										"SOURCE_CONNECTION_STRING": {
											"value": "@item().SOURCE_CONNECTION_STRING",
											"type": "Expression"
										},
										"SCHEMA_NAME": "NA",
										"TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "lookup_old_sys_change_version",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT \n    CONCAT(REPLACE(REPLACE(REPLACE(SOURCE_SYSTEM,'.','_'), '-','_'), '\\', '_'), '_',DATABASE_NAME,'_', SCHEMA_NAME, '_',TABLE_NAME) AS [OBJECT_NAME]\n    ,[PRIMARY_KEYS]\n    ,[LAST_CHANGE_TRACKING_VALUE]\nFROM [ETL].[SQLTableMetadata]\nWHERE [SOURCE_SYSTEM] = '@{pipeline().parameters.PARAM_SOURCE_SYSTEM}'\nAND [SOURCE_GROUPING_ID] = @{pipeline().parameters.PARAM_SOURCE_GROUPING_ID}\nAND CONCAT(REPLACE(REPLACE(REPLACE(SOURCE_SYSTEM,'.','_'), '-','_'), '\\', '_'), '_',DATABASE_NAME,'_', SCHEMA_NAME, '_',TABLE_NAME) = '@{item().OBJECT_NAME}'\nAND [IS_Enabled] = 1\nAND [LOAD_TYPE] = 'CHANGE_TRACKING'\nAND [LAST_CHANGE_TRACKING_VALUE] IS NOT NULL",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "lookup_changed_tables",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "lookup_tables_change_tracking",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "DECLARE @SOURCE_SYSTEM varchar(500) = '@{activity('lookup_tables_change_tracking').output.value[0].SOURCE_SYSTEM}'\nDECLARE @DATABASE_NAME varchar(500) = '@{activity('lookup_tables_change_tracking').output.value[0].DATABASE_NAME}'\nDECLARE @SOURCE_CONNECTION_STRING varchar(500)= '@{activity('lookup_tables_change_tracking').output.value[0].SOURCE_CONNECTION_STRING}'\n\nDECLARE @curTrackingVersion int = CHANGE_TRACKING_CURRENT_VERSION()\nDECLARE @prevTrackingVersion int = @{activity('lookup_tables_change_tracking').output.value[0].LAST_CHANGE_TRACKING_VALUE}\n\n\n-- Step 1\n-- Get a list of table with change tracking enabled\nDECLARE @trackedTables AS table (TABLE_NAME nvarchar(1000), SCHEMA_NAME nvarchar(1000));\nINSERT INTO @trackedTables (TABLE_NAME, SCHEMA_NAME)\nSELECT sys.tables.name as TABLE_NAME, SCHEMA_NAME(sys.tables.schema_id) AS SCHEMA_NAME\nFROM sys.change_tracking_tables\nJOIN sys.tables\n    ON tables.object_id = change_tracking_tables.object_id\n\n\n-- Step 2\n-- Table to store list of tables with changes, Min/Max tracking numbers and row counts\nDECLARE @changedTables AS table (TABLE_NAME nvarchar(1000), SCHEMA_NAME nvarchar(1000),MinVersionTable bigint,MaxVersionTable bigint,RecCnt bigint);\n\n-- For each table name in tracked tables\nDECLARE @tableName nvarchar(1000)\nDECLARE @schemaName nvarchar(1000)\nWHILE EXISTS(SELECT TOP 1 *\nFROM @trackedTables)\nBEGIN\n    -- Set the current table name\n    SET @tableName = (SELECT TOP 1 TABLE_NAME FROM @trackedTables ORDER BY TABLE_NAME ASC);\n    SET @schemaName = (SELECT TOP 1 SCHEMA_NAME FROM @trackedTables WHERE TABLE_NAME = @tableName);\n  \n    -- Determine if the table has changed since the previous version\n    DECLARE @sql nvarchar(250)\n    DECLARE @retVal bigint\n    DECLARE @minChg bigint\n    DECLARE @maxChg bigint\n\n    SET @sql = 'select @retVal = count(*), @minChg = min(Sys_Change_Version),@maxChg= max(Sys_Change_Version) from changetable(changes ' + @schemaName + '.' +\n        @tableName + ', ' + CAST(@prevTrackingVersion AS varchar) + ') as changedTable where Sys_Change_Version<='+ CAST(@curTrackingVersion AS varchar)\n \n    EXEC sp_executesql @sql, N'@retVal bigint output, @minChg bigint output, @maxChg bigint output', @retVal output,@minChg output,@maxChg output \n    IF @retVal > 0\n        BEGIN\n        INSERT INTO @changedTables (TABLE_NAME,SCHEMA_NAME,MinVersionTable,MaxVersionTable,RecCnt) SELECT @tableName, @schemaName,@minChg, @maxChg, @retVal\n  END\n\n  -- Delete the current table name\n  DELETE FROM @trackedTables WHERE TABLE_NAME = @tableName;\nEND\n\n\n-- Step 3 - In reality, this may more sense being part of the above loop, but works for demonstation purposes.\n--show output of change tracking - Shows all tables with records with Tracking Version numbers between intial parameters and a row count\nSELECT\n    CONCAT(REPLACE(REPLACE(REPLACE(@SOURCE_SYSTEM,'.','_'), '-','_'), '\\', '_'), '_',@DATABASE_NAME,'_', SCHEMA_NAME, '_',TABLE_NAME) AS OBJECT_NAME,\n    @SOURCE_SYSTEM AS SOURCE_SYSTEM,\n    @DATABASE_NAME AS DATABASE_NAME,\n    SCHEMA_NAME AS SCHEMA_NAME,\n    @SOURCE_CONNECTION_STRING AS SOURCE_CONNECTION_STRING,\n    TABLE_NAME,\n    MaxVersionTable AS NEW_CHANGE_TRACKING_VALUE\nFROM @changedTables;",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "sdlh_sql_db_table",
						"type": "DatasetReference",
						"parameters": {
							"SOURCE_CONNECTION_STRING": {
								"value": "@activity('lookup_tables_change_tracking').output.value[0].SOURCE_CONNECTION_STRING",
								"type": "Expression"
							},
							"SCHEMA_NAME": "NA",
							"TABLE_NAME": "NA"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "filter_changed_tables",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "lookup_changed_tables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('lookup_changed_tables').output.value",
						"type": "Expression"
					},
					"condition": {
						"value": "@contains(join(activity('lookup_tables_change_tracking').output.value, ','), concat('\"TABLE_NAME\":\"',item().TABLE_NAME,'\",'))",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"PARAM_SOURCE_TYPE": {
				"type": "string"
			},
			"PARAM_SOURCE_SYSTEM": {
				"type": "string"
			},
			"PARAM_SOURCE_GROUPING_ID": {
				"type": "int"
			},
			"PARAM_QUEUE_STORAGE_ACCOUNT": {
				"type": "string"
			},
			"PARAM_QUEUE_NAME": {
				"type": "string"
			},
			"PARAM_DATETIME": {
				"type": "string"
			}
		},
		"folder": {
			"name": "SDLH/SQL_Server/Support"
		},
		"annotations": [],
		"lastPublishTime": "2023-03-03T16:57:45Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}