{
	"name": "sdlh_example_http_csv_generate_metadata",
	"properties": {
		"activities": [
			{
				"name": "lookup_etl_metadata",
				"description": "Runs a query on Metadata DB to retrieve required items for supplied SOURCE_TYPE & SOURCE_SYSTEM",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "sdlh_base_generate_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT *\nFROM ETL.BaseMetadata\nWHERE SOURCE_TYPE = '@{pipeline().parameters.PARAM_SOURCE_TYPE}'\nAND SOURCE_SYSTEM = '@{pipeline().parameters.PARAM_SOURCE_SYSTEM}'\nAND SOURCE_GROUPING_ID BETWEEN @{pipeline().parameters.PARAM_SOURCE_GROUPING_ID_START} AND @{pipeline().parameters.PARAM_SOURCE_GROUPING_ID_END}\nAND IS_ENABLED = 1",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "sdlh_azuresql_db_metadata",
						"type": "DatasetReference",
						"parameters": {
							"METADATA_TABLE_NAME": "BaseMetadata"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "generate_json_metadata",
				"description": "Executes a stored procedure which checks if any updates are required",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "for_each_etl_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ETL].[usp_GenericGenerateJsonMetadata]",
					"storedProcedureParameters": {
						"PARAM_SOURCE_SYSTEM": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_SOURCE_TYPE": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "azure_sql_data_no_param_azir",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "sdlh_base_generate_metadata",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "sdlh_base_generate_metadata",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			},
			{
				"name": "for_each_etl_metadata",
				"description": "This for loop iterates through the each required item and loads required metadata into the Metadata DB.  Tables included are ETLGenericColumnMetadata & ETL.GenericTableMetadata & ETL.JsonMetadata",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "lookup_etl_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "execute_set_is_enabled_table_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "execute_set_is_enabled_column_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "get_keyvault_secret",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('lookup_etl_metadata').output.value",
						"type": "Expression"
					},
					"batchCount": 20,
					"activities": [
						{
							"name": "etl_auto_create_temp_table",
							"description": "This copy activity is used to create a temporary table in the metadata DB to allow us to extract  the projected data types for a given source system.  It is set with the minimum timeout of 10 minutes as we don't need the data we just need the table created so we can get the projected data types.",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "HttpReadSettings",
										"requestMethod": "GET"
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"tableOption": "autoCreate",
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"enableSkipIncompatibleRow": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sdlh_http_anonymous_csv_comma_defaults",
									"type": "DatasetReference",
									"parameters": {
										"BASE_URL": {
											"value": "@pipeline().parameters.PARAM_BASE_URL",
											"type": "Expression"
										},
										"RELATIVE_URL": {
											"value": "@concat('csv?uri=list/metricTypes')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": {
											"value": "@concat('z_temp_',item().SOURCE_TYPE,'_',item().TABLE_NAME)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "etl_metadata_columns",
							"description": "Writes required config to ETL.GenericColumnMetadata",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "etl_auto_create_temp_table",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT '@{item().SOURCE_TYPE}' AS SOURCE_TYPE\n    ,'@{item().SOURCE_SYSTEM}' AS SOURCE_SYSTEM\n    ,'@{item().SOURCE_GROUPING_ID}' AS SOURCE_GROUPING_ID\n    ,CASE\n        WHEN COLUMN_NAME NOT IN (@{concat('''', replace(if(equals(item().COLUMNS_TO_EXCLUDE, null), '-1', item().COLUMNS_TO_EXCLUDE), ',' , ''','''), '''')}) THEN 1\n        ELSE 0\n    END AS IS_ENABLED\n    ,'@{item().TABLE_NAME}' AS TABLE_NAME\n    ,COLUMN_NAME\n    ,CASE\n        WHEN UPPER(DATA_TYPE) = 'DECIMAL' THEN CONCAT(DATA_TYPE, '(', NUMERIC_PRECISION, ',' , NUMERIC_SCALE, ')')\n        WHEN UPPER(DATA_TYPE) = 'NUMERIC' THEN CONCAT(DATA_TYPE, '(', NUMERIC_PRECISION, ',' , NUMERIC_SCALE, ')')\n        ELSE DATA_TYPE\n    END AS DATA_TYPE\n    ,CHARACTER_MAXIMUM_LENGTH\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = @{concat('''z_temp_',item().SOURCE_TYPE,'_',item().TABLE_NAME,'''')}\nAND TABLE_SCHEMA = 'ETL'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "upsert",
									"upsertSettings": {
										"useTempDB": true,
										"keys": [
											"SOURCE_TYPE",
											"SOURCE_SYSTEM",
											"TABLE_NAME",
											"COLUMN_NAME"
										]
									},
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": true
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "GenericColumnMetadata"
									}
								}
							]
						},
						{
							"name": "etl_metadata_tables",
							"description": "Writes required config to ETL.GenericTableMetadata",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "lookup_new_columns",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT '@{item().SOURCE_TYPE}' AS SOURCE_TYPE\n    ,'@{item().SOURCE_SYSTEM}' AS SOURCE_SYSTEM\n    ,@{item().SOURCE_GROUPING_ID} AS SOURCE_GROUPING_ID\n    ,'@{item().IS_ENABLED}' AS IS_ENABLED\n    ,'@{item().LOAD_TYPE}' AS LOAD_TYPE\n    ,'@{item().BATCH_FREQUENCY}' AS BATCH_FREQUENCY\n    ,'@{item().TABLE_NAME}' AS TABLE_NAME\n    ,'@{item().PRIMARY_KEYS}' AS PRIMARY_KEYS\n    ,'@{item().WATERMARK_COLUMN}' AS WATERMARK_COLUMN\n    ,'@{item().SERVERLESS_SQL_POOL_DATABASE}' AS SERVERLESS_SQL_POOL_DATABASE\n    ,'@{item().SERVERLESS_SQL_POOL_SCHEMA}' AS SERVERLESS_SQL_POOL_SCHEMA\n    ,'@{activity('lookup_new_columns').output.firstRow.COLUMNS_LIST}' AS COLUMNS_LIST\n    ,'@{activity('lookup_new_columns').output.firstRow.COLUMNS_META}' AS COLUMNS_META\n    ,'@{activity('lookup_new_columns').output.firstRow.INFORMATION_SCHEMA}' AS INFORMATION_SCHEMA\n    ,'@{item().CUSTOM_FIELD_1}' AS CUSTOM_FIELD_1\n    ,'@{item().CUSTOM_FIELD_2}' AS CUSTOM_FIELD_2\n    ,'@{item().CUSTOM_FIELD_3}' AS CUSTOM_FIELD_3\n    ,'@{item().CUSTOM_FIELD_4}' AS CUSTOM_FIELD_4\n    ,'@{item().CUSTOM_FIELD_5}' AS CUSTOM_FIELD_5\n    ,'@{item().CUSTOM_FIELD_6}' AS CUSTOM_FIELD_6\n    ,'@{item().CUSTOM_FIELD_7}' AS CUSTOM_FIELD_7\n    ,'@{item().CUSTOM_FIELD_8}' AS CUSTOM_FIELD_8\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "upsert",
									"upsertSettings": {
										"useTempDB": true,
										"keys": [
											"SOURCE_TYPE",
											"SOURCE_SYSTEM",
											"TABLE_NAME"
										]
									},
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "GenericTableMetadata"
									}
								}
							]
						},
						{
							"name": "lookup_new_columns",
							"description": "Retrieves latest Table Column config for the source systems INFORMATION_SCHEMA to be used within the loop.",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "etl_metadata_columns",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "WITH CTE_ALIAS AS (\nSELECT TABLE_NAME\n    ,REPLACE(COLUMN_NAME, '''', '''''') AS COLUMN_NAME\n    ,CHARACTER_MAXIMUM_LENGTH\n    ,DATA_TYPE\n    ,REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(RTRIM(LTRIM(COLUMN_NAME)), ' ', '_'), ',', '_'), ';', '_'), '{', '_'), '}', '_'), '(', '_'), ')', '_'), '=', '_'), '''', '''''') AS COLUMN_ALIAS\nFROM ETL.GenericColumnMetadata\nWHERE TABLE_NAME = '@{item().TABLE_NAME}'\nAND SOURCE_SYSTEM = '@{item().SOURCE_SYSTEM}'\nAND SOURCE_TYPE = '@{item().SOURCE_TYPE}'\nAND COLUMN_NAME NOT IN (@{concat('''', replace(if(equals(item().COLUMNS_TO_EXCLUDE, null), '-1', item().COLUMNS_TO_EXCLUDE), ',' , ''','''), '''')})),\n\ncte_col_with_alias AS (\nSELECT *\n    ,CONCAT('S.',COLUMN_NAME, ' AS ' , COLUMN_ALIAS) AS COLUMN_WITH_ALIAS\nFROM CTE_ALIAS)\n\nSELECT\n    TABLE_NAME\n    ,REPLACE(REPLACE(REPLACE(STUFF((\n        SELECT ',' + CAST(COLUMN_WITH_ALIAS AS varchar(max))\n        FROM cte_col_with_alias AS innerTable\n        WHERE innerTable.TABLE_NAME = p.TABLE_NAME\n        FOR XML PATH('')\n        ),1,1,''), '&amp;', '&'), '&lt;', '<'), '&gt;', '>') AS COLUMNS_META\n    ,REPLACE(REPLACE(REPLACE(STUFF((\n        SELECT ',' + CAST(COLUMN_NAME AS varchar(max))\n        FROM cte_col_with_alias AS innerTable\n        WHERE innerTable.TABLE_NAME = p.TABLE_NAME\n        FOR XML PATH('')\n        ),1,1,''), '&amp;', '&'), '&lt;', '<'), '&gt;', '>') AS COLUMNS_LIST\n    ,REPLACE(REPLACE(REPLACE(STUFF((\n        SELECT COLUMN_NAME,DATA_TYPE,CHARACTER_MAXIMUM_LENGTH\n        FROM cte_col_with_alias AS innerTable\n        WHERE innerTable.TABLE_NAME = p.TABLE_NAME\n        FOR XML PATH('')\n    ),1,0,''), '&amp;', '&'), '&lt;', ''), '&gt;', '') AS INFORMATION_SCHEMA\nFROM cte_col_with_alias AS p\nGROUP BY p.TABLE_NAME",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "execute_drop_temp_table",
							"description": "One we have the etl_metadata_columns we execute a stored procedure to drop the temp created table as we no longer need it.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "etl_metadata_columns",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_GenericDropTempTable]",
								"storedProcedureParameters": {
									"PARAM_SCHEMA_NAME": {
										"value": "ETL",
										"type": "String"
									},
									"PARAM_TABLE_NAME": {
										"value": {
											"value": "@concat('z_temp_',item().SOURCE_TYPE,'_',item().TABLE_NAME)",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "azure_sql_data_no_param_azir",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "create_log_entry_generate_columns",
							"description": "This lookup runs a stored procedure which generates a log entry in the ETL.Log table.",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "etl_metadata_columns",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[ETL].[usp_InsertLog]",
									"storedProcedureParameters": {
										"SOURCE_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
												"type": "Expression"
											}
										},
										"SOURCE_SYSTEM": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
												"type": "Expression"
											}
										},
										"SOURCE_GROUPING_ID": {
											"type": "Int32",
											"value": null
										},
										"OBJECT_NAME": {
											"type": "String",
											"value": {
												"value": "@toLower(replace(concat(pipeline().parameters.PARAM_SOURCE_TYPE,'_',pipeline().parameters.PARAM_SOURCE_SYSTEM,'_',item().TABLE_NAME),' ' ,''))",
												"type": "Expression"
											}
										},
										"DATABASE_NAME": {
											"type": "String",
											"value": null
										},
										"SCHEMA_NAME": {
											"type": "String",
											"value": null
										},
										"TABLE_NAME": {
											"type": "String",
											"value": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										},
										"TRIGGER_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										},
										"TRIGGER_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											}
										},
										"PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										},
										"PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											}
										},
										"OPERATION": {
											"type": "String",
											"value": "Copy Activity"
										},
										"COMPONENT_NAME": {
											"type": "String",
											"value": {
												"value": "@toLower(concat(pipeline().parameters.PARAM_SOURCE_TYPE,'_generate_metadata_columns'))",
												"type": "Expression"
											}
										},
										"TARGET_SYSTEM": {
											"type": "String",
											"value": "Metadata DB"
										},
										"START_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										},
										"END_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										},
										"DURATION_SECONDS": {
											"type": "Int32",
											"value": {
												"value": "@activity('etl_metadata_columns').output.copyDuration",
												"type": "Expression"
											}
										},
										"INSERTS": {
											"type": "Int32",
											"value": {
												"value": "@activity('etl_metadata_columns').output.rowsCopied",
												"type": "Expression"
											}
										},
										"UPDATES": {
											"type": "Int32",
											"value": null
										},
										"DELETES": {
											"type": "Int32",
											"value": null
										},
										"ERROR_MESSAGE": {
											"type": "String",
											"value": null
										},
										"NEW_INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": null
										},
										"PREVIOUS_INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": null
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "create_log_entry_generate_tables",
							"description": "This lookup runs a stored procedure which generates a log entry in the ETL.Log table.",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "etl_metadata_tables",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[ETL].[usp_InsertLog]",
									"storedProcedureParameters": {
										"SOURCE_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
												"type": "Expression"
											}
										},
										"SOURCE_SYSTEM": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
												"type": "Expression"
											}
										},
										"SOURCE_GROUPING_ID": {
											"type": "Int32",
											"value": null
										},
										"OBJECT_NAME": {
											"type": "String",
											"value": {
												"value": "@toLower(replace(concat(pipeline().parameters.PARAM_SOURCE_TYPE,'_',pipeline().parameters.PARAM_SOURCE_SYSTEM,'_',item().TABLE_NAME),' ' ,''))",
												"type": "Expression"
											}
										},
										"TABLE_NAME": {
											"type": "String",
											"value": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										},
										"TRIGGER_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										},
										"TRIGGER_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											}
										},
										"PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										},
										"PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											}
										},
										"OPERATION": {
											"type": "String",
											"value": "Copy Activity"
										},
										"COMPONENT_NAME": {
											"type": "String",
											"value": {
												"value": "@toLower(concat(pipeline().parameters.PARAM_SOURCE_TYPE,'_generate_metadata_tables'))",
												"type": "Expression"
											}
										},
										"TARGET_SYSTEM": {
											"type": "String",
											"value": "Metadata DB"
										},
										"START_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										},
										"END_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										},
										"DURATION_SECONDS": {
											"type": "Int32",
											"value": {
												"value": "@activity('etl_metadata_tables').output.copyDuration",
												"type": "Expression"
											}
										},
										"INSERTS": {
											"type": "Int32",
											"value": {
												"value": "@activity('etl_metadata_tables').output.rowsCopied",
												"type": "Expression"
											}
										},
										"UPDATES": {
											"type": "Int32",
											"value": null
										},
										"DELETES": {
											"type": "Int32",
											"value": null
										},
										"ERROR_MESSAGE": {
											"type": "String",
											"value": null
										},
										"NEW_INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": null
										},
										"PREVIOUS_INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": null
										},
										"DATABASE_NAME": {
											"type": "String",
											"value": null
										},
										"SCHEMA_NAME": {
											"type": "String",
											"value": null
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": false
							}
						}
					]
				}
			},
			{
				"name": "execute_set_is_enabled_table_metadata",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "sdlh_base_generate_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ETL].[usp_GenericUpdateTable]",
					"storedProcedureParameters": {
						"PARAM_SOURCE_TYPE": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_SOURCE_SYSTEM": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_SOURCE_GROUPING_ID_START": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID_START",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_SOURCE_GROUPING_ID_END": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID_END",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_SCHEMA_NAME": {
							"value": "ETL",
							"type": "String"
						},
						"PARAM_TABLE_NAME": {
							"value": "GenericTableMetadata",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "azure_sql_data_no_param_azir",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "execute_set_is_enabled_column_metadata",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "sdlh_base_generate_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ETL].[usp_GenericUpdateTable]",
					"storedProcedureParameters": {
						"PARAM_SOURCE_TYPE": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_SOURCE_SYSTEM": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_SOURCE_GROUPING_ID_START": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID_START",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_SOURCE_GROUPING_ID_END": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_GROUPING_ID_END",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_SCHEMA_NAME": {
							"value": "ETL",
							"type": "String"
						},
						"PARAM_TABLE_NAME": {
							"value": "GenericColumnMetadata",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "azure_sql_data_no_param_azir",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "lookup_pipeline_parameters",
				"description": "Execute the stored procedure [Config].[usp_GetPipelineParameters] to return the pipeline parameters.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "sdlh_base_generate_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderStoredProcedureName": "[Config].[usp_GetPipelineParameters]",
						"storedProcedureParameters": {
							"Workspace": {
								"type": "String",
								"value": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "serverless_metadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "get_keyvault_secret",
				"description": "Used retrieve secret from key vault and secure the output",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "lookup_pipeline_parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"url": {
						"value": "@concat(activity('lookup_pipeline_parameters').output.firstRow.KEY_VAULT_URI,'secrets/',pipeline().parameters.PARAM_KEYVAULT_SECRET_NAME,'/?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "if_create_lakehouse_base_config_required",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "for_each_etl_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.PARAM_CREATE_LAKEHOUSE_BASE_CONFIG,true)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "sdlh_lakehouse_create_base_config",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "sdlh_lakehouse_create_base_config",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"PARAM_TARGET_DATABASE_NAME": {
										"value": "@activity('lookup_etl_metadata').output.value[0].SERVERLESS_SQL_POOL_DATABASE",
										"type": "Expression"
									},
									"PARAM_TARGET_SCHEMA_NAME": {
										"value": "@activity('lookup_etl_metadata').output.value[0].SERVERLESS_SQL_POOL_SCHEMA",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			}
		],
		"concurrency": 50,
		"parameters": {
			"PARAM_SOURCE_TYPE": {
				"type": "string",
				"defaultValue": "HTTP"
			},
			"PARAM_SOURCE_SYSTEM": {
				"type": "string"
			},
			"PARAM_SOURCE_GROUPING_ID_START": {
				"type": "string",
				"defaultValue": "1"
			},
			"PARAM_SOURCE_GROUPING_ID_END": {
				"type": "string",
				"defaultValue": "1"
			},
			"PARAM_BASE_URL": {
				"type": "string"
			},
			"PARAM_KEYVAULT_SECRET_NAME": {
				"type": "string"
			},
			"PARAM_CREATE_LAKEHOUSE_BASE_CONFIG": {
				"type": "bool",
				"defaultValue": true
			}
		},
		"folder": {
			"name": "SDLH/Web_Services/HTTP/_Examples_Clone_If_Using"
		},
		"annotations": [],
		"lastPublishTime": "2023-07-25T15:14:09Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}