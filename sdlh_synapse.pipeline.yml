#################################################################
# ANS CoE SDLH (Strategic Data Lakehouse) Synapse Deployment
#
# This template contains a pipeline definition to extract
# and create feature branch for SDLH Synapse Workspace
# https://github.com/ans-coe/sdlh-synapse
#################################################################
parameters:
- name: pat_token
  type: string
- name: release_version
  type: string
  default: 'latest'
- name: synapse_shir_name 
  type: string
  default: 'shir-dcoe-data-uksouth-002'
- name: spark_pool_name 
  type: string
  default: 'synspsm33as34'

variables:
  current_date: $[ format('{0:yyyy}_{0:MM}_{0:dd}', pipeline.startTime) ]

name: SDLH Synapse Deployment

pr: none
trigger: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: git://$(System.TeamProject)/$(Build.Repository.Name)@main

- task: CmdLine@2
  displayName: 'Setup Git'
  inputs:
    script: |
      git config --local user.email "noreply@ansgroup.co.uk"
      git config --local user.name $(Build.RequestedFor)

- task: CmdLine@2
  displayName: 'Get Upstream'
  inputs:
    script: |
      if [[ ${{ parameters.release_version }} == "latest" ]]; then
        BUNDLE_URL=$(curl -s https://api.github.com/repos/ans-coe/sdlh-synapse/releases/latest | jq -r '.assets[] | select(.name == "SDLH.tar.gz") | .browser_download_url')
        wget -q "$BUNDLE_URL" -O "SDLH.tar.gz"
      else
        BUNDLE_URL=$(curl -s https://api.github.com/repos/ans-coe/sdlh-synapse/releases/tags/v${{ parameters.release_version }} | jq -r '.assets[] | select(.name == "SDLH.tar.gz") | .browser_download_url')
        wget -q "$BUNDLE_URL" -O "SDLH.tar.gz"
      fi

- task: CmdLine@2
  displayName: 'Extract Upstream Zip'
  inputs:
    script: |
      tar -xzf "SDLH.tar.gz"
      rm "SDLH.tar.gz"
  
- task: PythonScript@0
  displayName: 'Replace Required Files'
  inputs:
    scriptSource: 'inline'
    script: |
      import os
      def multifile_find_and_replace(folder:str, oldString:str, newString:str):
          for root, dirs, files in os.walk(folder):
              for file in files:
                  if file != '.DS_Store':
                      file_path = os.path.join(root, file)
                      with open(file_path, 'r') as f:
                          content = f.read()
                          newContent = content.replace(oldString, newString)
                      if newContent != content:
                          with open(file_path, 'w') as f:
                              f.write(newContent)
                          print(f'Replaced value in: {file_path}')

      multifile_find_and_replace('linkedService', 'PARAM_SHIR_NAME', '${{ parameters.synapse_shir_name }}')
      multifile_find_and_replace('pipeline', 'PARAM_SPARK_POOL_NAME', '${{ parameters.spark_pool_name }}')

- task: CmdLine@2
  displayName: 'Check For Updates'
  inputs:
    script: |
      if [[ -n $(git status --porcelain) ]]; then
        echo "There are modified or untracked files."
        git add .
        git commit -m "sdlh_updates_$(current_date)"
        echo "##vso[task.setvariable variable=updates]true"
      else
        echo "There are no modified or untracked files."
        echo "##vso[task.setvariable variable=updates]false"
      fi

- task: CmdLine@2
  displayName: 'Push Changes'
  inputs:
    script: |
      if [ "$(updates)" == "true" ]; then
        git remote set-url origin $(git remote get-url origin | sed "s|https://[^@]*@dev.azure.com|https://${{ parameters.pat_token }}@dev.azure.com|") 
        echo "Pushing changes to preview-sdlh-updates branch."
        git push origin HEAD:refs/heads/preview-sdlh-updates-build$(Build.BuildId)
      else
        echo "No updates to push."
      fi